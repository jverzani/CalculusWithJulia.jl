var documenterSearchIndex = {"docs":
[{"location":"#CalculusWithJulia.jl","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.jl","text":"","category":"section"},{"location":"","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.jl","text":"Documentation for CalculusWithJulia.jl, a package to accompany  the notes \"Calculus with Julia\" for using Julia for Calculus.","category":"page"},{"location":"","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.jl","text":"To suggest corrections to the notes, please submit a pull request to https://github.com/jverzani/CalculusWithJuliaNotes.jl/. The Quarto pages makes this easy, as they have an \"Edit this page\" link.","category":"page"},{"location":"","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.jl","text":"","category":"page"},{"location":"#Index","page":"CalculusWithJulia.jl","title":"Index","text":"","category":"section"},{"location":"","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.jl","text":"Modules = [CalculusWithJulia]","category":"page"},{"location":"#CalculusWithJulia.CalculusWithJulia","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.CalculusWithJulia","text":"CalculusWithJulia\n\nA package to accompany notes at https://calculuswithjulia.github.io on using Julia for topics from the calculus sequence.\n\nThis package does two things:\n\nIt loads a few other packages making it easier to use (and install) the functionality provided by them and\nIt defines a handful of functions for convenience. The exported ones\n\nare e, unzip, rangeclamp tangent, secant, D (and the prime notation), divergence, gradient, curl, and ∇, along with some plotting functions\n\nPackages loaded by CalculusWithJulia\n\nThe SpecialFunctions is loaded giving access to a few special functions used in these notes, e.g., airyai, gamma\nThe ForwardDiff package is loaded giving access to its  derivative,  gradient, jacobian, and hessian functions for finding automatic derivatives of functions. In addition, this package defines ' (for functions) to return a derivative (which commits type piracy), ∇ to find the gradient (∇(f)), the divergence (∇⋅F). and the curl (∇×F), along with divergence and curl.\n\nThe LinearAlgebra package is loaded for access to several of its functions for working with vectors norm, cdot (⋅), cross (×), det.\nThe PlotUtils package is loaded so that its adapted_grid function is available.\n\nPackages with extra features added when loaded\n\nThe Julia package Requires allows for additional code to be run when another package is loaded. The following packages have additional code to load:\n\nSymPy: for symbolic math.\nPlots: the Plots package provides a plotting interface.\n\nSeveral plot recipes are provided to ease the creation of plots in the notes. plotif, trimplot, and signchart are used for plotting univariate functions; plot_polar and plot_parametric are used to plot curves in 2 or 3 dimensions; plot_parametric also makes the plotting og parameterically defined surfaces easier; vectorfieldplot and vectorfieldplot3d can be used to plot vector fields; and arrow is a simplified interface to quiver that also indicates 3D vectors.\n\nThe plot_implicit function can plot 2D implicit plots. (It is borrowed from ImplicitPlots.jl, which is avoided, as it has dependencies that hold other packages back.)\n\nOther packages with a recurring role in the accompanying notes:\n\nRoots is used to find zeros of univariate functions\nSymPy for symbolic math\nQuadGK and HCubature are used for numeric integration\n\n\n\n\n\n","category":"module"},{"location":"#CalculusWithJulia.D","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.D","text":"D(f)\n\nFunction interface to ForwardDiff.derivative.\n\nAlso overrides f' to take take a derivative.\n\n\n\n\n\n","category":"function"},{"location":"#CalculusWithJulia.arrow!-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.arrow!","text":"arrow(p, v)\n\nAdd vector, v, to plot anchored at point p.\n\nExample\n\nFn = parametric(t -> [2cos(t), 3sin(t)])\nFnp = t -> ForwardDiff.derivative(Fn, t)\np = plot(Fn, 0, 2pi, legend=false)\nfor t in 0:pi/4:pi\n   arrow!(Fn(t), Fnp(t))\nend\np\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.arrow!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.arrow!","text":"arrow(p, v)\n\nAdd vector, v, to plot anchored at point p.\n\nExample\n\nFn = parametric(t -> [2cos(t), 3sin(t)])\nFnp = t -> ForwardDiff.derivative(Fn, t)\np = plot(Fn, 0, 2pi, legend=false)\nfor t in 0:pi/4:pi\n   arrow!(Fn(t), Fnp(t))\nend\np\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.arrow-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.arrow","text":"arrow(p, v)\n\nAdd vector, v, to plot anchored at point p.\n\nExample\n\nFn = parametric(t -> [2cos(t), 3sin(t)])\nFnp = t -> ForwardDiff.derivative(Fn, t)\np = plot(Fn, 0, 2pi, legend=false)\nfor t in 0:pi/4:pi\n   arrow!(Fn(t), Fnp(t))\nend\np\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.curl-Tuple{Matrix}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.curl","text":"curl(F)\n\nFind curl of a 2 or 3-D vector field.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.divergence-Tuple{Tuple}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.divergence","text":"divergence(F)\n\nFind divergence of a 3-D vector vield.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.fubini-Tuple{Any, Any}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.fubini","text":"fubini(f, [zs], [ys], xs; rtol=missing, kws...)\n\nIntegrate f of 1, 2, or 3 input variables.\n\nThe zs may depend (x,y), the ys may depend on x\n\nExamples\n\n# integrate over the unit square\nfubini((x,y) -> sin(x-y), (0,1), (0,1))\n\n# integrate over a triangle\nfubini((x,y) -> 1, (0,identity), (0,1 ))\n\n#\nf(x,y,z) = x*y^2*z^3\nfubini(f, (0,(x,y) ->  x+ y), (0, x -> x), (0,1))\n\nNote: This code relies on quadgk which isn't loaded in this package. It won't run unless defined elsewhere, say by copy-and-paste.\n\nNote: This uses nested calls to quadgk. The use of hcubature is recommended, typically after a change of variables to make a rectangular domain. The relative tolerance increases at each nested level.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.plotif!-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.plotif!","text":"plotif(f, g, a, b)\n\nPlot f colored depending on g < 0 or not.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.plotif!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.plotif!","text":"plotif(f, g, a, b)\n\nPlot f colored depending on g < 0 or not.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.plotif-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.plotif","text":"plotif(f, g, a, b)\n\nPlot f colored depending on g < 0 or not.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.rangeclamp","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.rangeclamp","text":"rangeclamp(f, hi=20, lo=-hi; replacement=NaN)\n\nModify f so that values of f(x) outside of [lo,hi] are replaced by replacement.\n\nExamples\n\nf(x) = 1/x\nplot(rangeclamp(f), -1, 1)\nplot(rangeclamp(f, 10), -1, 1) # no `abs(y)` values exceeding 10\n\n\n\n\n\n","category":"function"},{"location":"#CalculusWithJulia.riemann-Tuple{Function, Real, Real, Int64}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.riemann","text":"riemann: compute Riemann sum approximations to a definite integral. As well, implement trapezoid and Simpson's rule.\n\nExample:\n\nf(x) = exp(x^2)\nriemann(f, 0, 1, 1000)   # default right-Riemann sums\nriemann(f, 0, 1, 1000, method=\"left\")       # left sums\nriemann(f, 0, 1, 1000, method=\"trapezoid\")  # use trapezoid rule\nriemann(f, 0, 1, 1000, method=\"simpsons\")   # use Simpson's rule\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.secant-Tuple{Any, Any, Any}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.secant","text":"secant(f::Function, a, b)\n\nReturns a function describing the secant line to the graph of f at x=a and x=b.\n\nExample. Where does the secant line intersect the y axis?\n\nf(x) = sin(x)\na, b = pi/4, pi/3\nsl(x) = secant(f, a, b)(x)  # or sl = sl(f, a, b) to use a non-generic function\nsl(0)\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.sign_chart-Tuple{Any, Any, Any}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.sign_chart","text":"sign_chart(f, a, b; atol=1e-4)\n\nCreate a sign chart for f over (a,b). Returns a tuple with an identified zero or vertical asymptote and the corresponding sign change. The tolerance is used to disambiguate numerically found values.\n\nExample\n\njulia> sign_chart(x -> x/(x-1)^2, -5, 5)\n2-element Vector{NamedTuple{(:∞0, :sign_change), Tuple{Float64, String}}}:\n (∞0 = 0.0, sign_change = \"- → +\")\n (∞0 = 1.0000000000000002, sign_change = \"+ → +\")\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.tangent-Tuple{Any, Any}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.tangent","text":"tangent(f::Function, c)\n\nReturns a function describing the tangent line to the graph of f at x=c.\n\nExample. Where does the tangent line intersect the y axis?\n\nf(x) = sin(x)\ntl(x) = tangent(f, pi/4)(x)  # or tl = tangent(f, pi/3) to use a non-generic function\ntl(0)\n\nUses the automatic derivative of f to find the slope of the tangent line at x=c.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.trimplot!-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.trimplot!","text":"trimplot(f, a, b, c=20; kwargs...)\n\nPlot f over [a,b] but break graph if it exceeds c in absolute value.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.trimplot!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.trimplot!","text":"trimplot(f, a, b, c=20; kwargs...)\n\nPlot f over [a,b] but break graph if it exceeds c in absolute value.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.trimplot-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.trimplot","text":"trimplot(f, a, b, c=20; kwargs...)\n\nPlot f over [a,b] but break graph if it exceeds c in absolute value.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.unzip-Tuple{Vector}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.unzip","text":"unzip(vs)\nunzip(v1, v2, ...)\nunzip(r::Function, a, b)\n\nTake a vector of points described by vectors (as returned by, say r(t)=[sin(t),cos(t)], r.([1,2,3]), and return a tuple of collected x values, y values, and optionally z values.\n\nWrapper around the invert function of SplitApplyCombine.\n\nIf the argument is specified as a comma separated collection of vectors, then these are combined and passed along.\n\nIf the argument is a function and two end points, then the function is evaluated at 100 points between a and b.\n\nThis is useful for plotting when the data is more conveniently represented in terms of vectors, but the plotting interface requires the x and y values collected.\n\nExamples:\n\nusing Plots\nr(t) = [sin(t), cos(t)]\nrp(t) = [cos(t), -sin(t)]\nplot(unzip(r, 0, 2pi)...)  # calls plot(xs, ys)\n\nt0, t1 = pi/6, pi/4\n\np, v = r(t0), rp(t0)\nplot!(unzip(p, p+v)...)  # connect p to p+v with line\n\np, v = r(t1), rp(t1)\nquiver!(unzip([p])..., quiver=unzip([v]))\n\nBased on unzip from the Plots package. Implemented through invert of SplitApplyCombine\n\nNote: for a vector of points, xs, each of length 2, a similar functionality would be (first.(xs), last.(xs)). If each point had length 3, then with second(x)=x[2], a similar functionality would be (first.(xs), second.(xs), last.(xs)).\n\n```\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.uvec-Tuple{Any}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.uvec","text":"uvec(x)\n\nHelper to find a unit vector.\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot!-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot!","text":"vectorfieldplot(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=8], [ny=8])\n\nCreate a vector field plot using a grid described by xlim, ylim with nx and ny grid points in each direction.\n\nF(x,y) = [-y, x]\nvectorfieldplot(F, xlim=(-4,4), ylim=(-4,4))\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot!","text":"vectorfieldplot(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=8], [ny=8])\n\nCreate a vector field plot using a grid described by xlim, ylim with nx and ny grid points in each direction.\n\nF(x,y) = [-y, x]\nvectorfieldplot(F, xlim=(-4,4), ylim=(-4,4))\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot","text":"vectorfieldplot(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=8], [ny=8])\n\nCreate a vector field plot using a grid described by xlim, ylim with nx and ny grid points in each direction.\n\nF(x,y) = [-y, x]\nvectorfieldplot(F, xlim=(-4,4), ylim=(-4,4))\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot3d!-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot3d!","text":"vectorfieldplot3d(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=5], [ny=5])\n\nCreate a 3 dimensional vector field plot using a grid described by xlim, ylim, zlim with nx, ny, and nz grid points in each direction.\n\nNote: the vectors are represented with line, not arrow due to no implementation of :quiver3d.\n\nF(x,y,z) = [-y, x,z]\nvectorfieldplot3d(F, xlims=(-4,4), ylims=(-4,4), zlims=(0,3))\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot3d!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot3d!","text":"vectorfieldplot3d(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=5], [ny=5])\n\nCreate a 3 dimensional vector field plot using a grid described by xlim, ylim, zlim with nx, ny, and nz grid points in each direction.\n\nNote: the vectors are represented with line, not arrow due to no implementation of :quiver3d.\n\nF(x,y,z) = [-y, x,z]\nvectorfieldplot3d(F, xlims=(-4,4), ylims=(-4,4), zlims=(0,3))\n\n\n\n\n\n","category":"method"},{"location":"#CalculusWithJulia.vectorfieldplot3d-Tuple","page":"CalculusWithJulia.jl","title":"CalculusWithJulia.vectorfieldplot3d","text":"vectorfieldplot3d(F; [xlim=(-5,5)], [ylim=(-5,5)], [nx=5], [ny=5])\n\nCreate a 3 dimensional vector field plot using a grid described by xlim, ylim, zlim with nx, ny, and nz grid points in each direction.\n\nNote: the vectors are represented with line, not arrow due to no implementation of :quiver3d.\n\nF(x,y,z) = [-y, x,z]\nvectorfieldplot3d(F, xlims=(-4,4), ylims=(-4,4), zlims=(0,3))\n\n\n\n\n\n","category":"method"}]
}
